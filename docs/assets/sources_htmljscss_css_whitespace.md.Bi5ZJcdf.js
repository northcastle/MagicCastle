import{_ as s,c as a,o as i,aR as e}from"./chunks/framework.DjTIwazY.js";const g=JSON.parse('{"title":"CSS 设置空格原样显示","description":"","frontmatter":{"title":"CSS 设置空格原样显示"},"headers":[],"relativePath":"sources/htmljscss/css/whitespace.md","filePath":"sources/htmljscss/css/whitespace.md","lastUpdated":1713160207000}'),t={name:"sources/htmljscss/css/whitespace.md"},p=e(`<h1 id="css-设置空格原样显示" tabindex="-1">CSS 设置空格原样显示 <a class="header-anchor" href="#css-设置空格原样显示" aria-label="Permalink to &quot;CSS 设置空格原样显示&quot;">​</a></h1><h2 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h2><blockquote><p>html 渲染内容时，对于 空格、回车、Tab 键的 默认处理方式是 ： <br><code>无论存在多少个连续的空格，都只会保留一个</code>。<br></p></blockquote><div class="danger custom-block"><p class="custom-block-title">结论</p><p>由于以上的特性，导致了我们无法直接渲染出原格式的文本。</p></div><h2 id="pre-标签" tabindex="-1"><code>pre</code> 标签 <a class="header-anchor" href="#pre-标签" aria-label="Permalink to &quot;\`pre\` 标签&quot;">​</a></h2><h3 id="了解一下" tabindex="-1">了解一下 <a class="header-anchor" href="#了解一下" aria-label="Permalink to &quot;了解一下&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;pre&gt; 标签 可以在一定程度上弥补上述问题，它的作用是，将文本原样输出。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>听上去好像 &lt;pre&gt; 标签 能够解决 空格渲染的问题。</span></span>
<span class="line"><span>对，没错，它的确可以保留所有的原格式。</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>但是，正因为它是保留所有的原格式，就导致了，你的文本是啥样就会展示成啥样。<br> 例如 ：它不会自动换行。<br> 这样的话，用起来也不是特别的方便。</p></div><h3 id="使用案例" tabindex="-1">使用案例 <a class="header-anchor" href="#使用案例" aria-label="Permalink to &quot;使用案例&quot;">​</a></h3><blockquote><p>下面展示一下<code>&lt;pre&gt;</code>标签的使用:</p></blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;border:1px solid red;width:500px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    钢铁侠，               本名托尼·史塔克，是美国漫威漫画旗下的超级英雄。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    他初次登场于1963年的《悬疑故事》第39期，由斯坦·李、赖瑞·理柏、唐·赫克和杰克·科比联合创造。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    托尼出生于1970年5月29日，是斯塔克工业（STARK INDUSTRIES）的CEO。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><blockquote><p>效果展示 ： <code>空格原样展示；不会自动换行。</code></p></blockquote><div style="border:1px solid red;width:500px;"><pre>    钢铁侠，               本名托尼·史塔克，是美国漫威漫画旗下的超级英雄。
    他初次登场于1963年的《悬疑故事》第39期，由斯坦·李、赖瑞·理柏、唐·赫克和杰克·科比联合创造。
    托尼出生于1970年5月29日，是斯塔克工业（STARK INDUSTRIES）的CEO。
    </pre></div><h2 id="white-space-属性" tabindex="-1">white-space 属性（*） <a class="header-anchor" href="#white-space-属性" aria-label="Permalink to &quot;white-space 属性（*）&quot;">​</a></h2><h3 id="作用说明" tabindex="-1">作用说明 <a class="header-anchor" href="#作用说明" aria-label="Permalink to &quot;作用说明&quot;">​</a></h3><p><code>white-space:pre-wrap;</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>可以实现 ：&lt;br&gt;</span></span>
<span class="line"><span>1.空格、回车、Tab 原样输出；</span></span>
<span class="line"><span>2.自动换行；</span></span></code></pre></div><h3 id="使用案例-1" tabindex="-1">使用案例 <a class="header-anchor" href="#使用案例-1" aria-label="Permalink to &quot;使用案例&quot;">​</a></h3><blockquote><p>下面展示一下 <code>white-sapce:pre-wrap;</code>的使用</p></blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;border:1px solid green;width:500px;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pre</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;white-space:pre-wrap;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   钢铁侠，              本名托尼·史塔克，是美国漫威漫画旗下的超级英雄。他初次登场于1963年的《悬疑故事》第39期，由斯坦·李、赖瑞·理柏、唐·赫克和杰克·科比联合创造。托尼出生于1970年5月29日，是斯塔克工业（STARK INDUSTRIES）的CEO。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><blockquote><p>效果展示 ： <code>空格原样展示；自动换行。</code></p></blockquote><div style="border:1px solid green;width:500px;"><pre style="white-space:pre-wrap;"> 
   钢铁侠，              本名托尼·史塔克，是美国漫威漫画旗下的超级英雄。他初次登场于1963年的《悬疑故事》第39期，由斯坦·李、赖瑞·理柏、唐·赫克和杰克·科比联合创造。托尼出生于1970年5月29日，是斯塔克工业（STARK INDUSTRIES）的CEO。
   </pre></div><p>以上就是 CSS 中保留空格样式输出的 <code>white-space</code>属性的使用。</p>`,23),n=[p];function l(h,r,d,k,c,o){return i(),a("div",null,n)}const u=s(t,[["render",l]]);export{g as __pageData,u as default};
